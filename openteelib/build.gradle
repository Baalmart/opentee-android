import org.apache.tools.ant.taskdefs.condition.Os

apply plugin: 'com.android.library'

android {
    compileSdkVersion 21
    buildToolsVersion "22.0.1"

    defaultConfig {
        minSdkVersion 21
        targetSdkVersion 22
        versionCode 1
        versionName "1.0"

    }

    // START Config for ndk-build to be called when Building through gradle
    sourceSets.main {
        jni.srcDirs = [] // This prevents the auto generation of Android.mk
        jniLibs.srcDir 'src/main/libs' // This is not necessary unless you have precompiled libraries in your project.
    }
    task buildNative(type: Exec, description: 'Compile JNI source via NDK') {
        def ndkBuildExecutable = getNdkDir()
        commandLine "$ndkBuildExecutable",
                '-C', file('src/main/jni').absolutePath, // Change src/main/jni the relative path to your jni source
                '-j', Runtime.runtime.availableProcessors(),
                'NDK_APPLICATION_MK=' + file('src/main/jni').absolutePath + File.separator + 'Application.mk',
                'V=1',
                'NDK_DEBUG=1'
    }

    task cleanNative(type: Exec, description: 'Clean JNI object files') {
        def ndkBuildExecutable = getNdkDir()
        commandLine "$ndkBuildExecutable",
                '-C', file('src/main/jni').absolutePath, // Change src/main/jni the relative path to your jni source
                'clean'
    }

    clean.dependsOn 'cleanNative'

    tasks.withType(JavaCompile) {
        compileTask -> compileTask.dependsOn buildNative
    }

    // END Config for ndk-build to be called when building through gradle

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
        debug {
            debuggable true
            jniDebuggable true
        }
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_7
        targetCompatibility JavaVersion.VERSION_1_7
    }

}

def getNdkDir() {
    File ndkDir = plugins.getPlugin('com.android.library').sdkHandler.getNdkFolder() //project.getPlugins().getPlugin('android').sdkHandler.ndkFolder
    if (ndkDir == null) {
        ndkDir = file(System.env.ANDROID_NDK)
    }

    if (ndkDir == null) {
        def gradle_project_root = project.rootProject.rootDir
        throw new GradleException("NDK is not configured. Make sure there is a local.properties " +
                "file with an ndk.dir entry in the directory ${gradle_project_root}, or set the " +
                "ANDROID_NDK environment variable")
    }

    def ndkBuildExecutable
    if (Os.isFamily(Os.FAMILY_WINDOWS)) {
        ndkBuildExecutable = new File(ndkDir, 'ndk-build.cmd')
    } else {
        ndkBuildExecutable = new File(ndkDir, 'ndk-build')
    }

    if (!ndkBuildExecutable.exists()) {
        throw new GradleException("Could not find ndk-build executable." +
                " The configured NDK directory ${ndkDir} may not be correct.")
    }
    return ndkBuildExecutable
}


dependencies {
    compile fileTree(dir: 'libs', include: ['*.jar'])
    compile files('libs/commons-logging-1.2.jar')
}
